#include <iostream>
using namespace std;


int blocks[20], process[20], allocation[20], no_blocks, no_processes;

void fill_data() {
	cout << "Enter no of Blocks.\n";
	cin >> no_blocks;

	for (int i = 0; i < no_blocks; i++)
	{
		cout << "Enter size of block no." << i + 1 << ": ";
		cin >> blocks[i];
	}

	cout << "Enter no of Process." << endl;
	cin >> no_processes;

		for (int i = 0; i < no_processes; i++)
		{
			cout << "Enter the size of process no." << i + 1 << ":";
			cin >> process[i];
		}
}


void first_fit() {
	
	fill_data();

	for (int x = 0; x < no_processes; x++) {

		if (blocks[x] >= process[x]) {
			
			cout << "Process of size " << process[x] << " assigned to block of size " << blocks[x] << endl;
		}
		
		else if (blocks[x] < process[x]) {
			for (int y = x+1 ; y <= no_processes; y++) {
				
				if (blocks[y] >= process[x]) {
					cout << "Process of size " << process[x] << " assigned to block of size " << blocks[y] << endl;
					x++;
				}
				else {
					cout << "Process of size " << process[x] << " is not assigned" << endl;
					x++;
				}

			}
		}
	}
}

void best_fit() {


	fill_data();

	int temp = 0;

	//ascendng order for blocks
	for (int i = 0; i < no_blocks; i++) {


		for (int j = i + 1; j < no_blocks ; j++) {

			if (blocks[i] > blocks[j]) {

				temp = blocks[i];
				blocks[i] = blocks[j];
				blocks[j] = temp;
			}
		}
	}


	for (int u = 0; u < no_processes; u++) {
		cout << process[u] << " ";
	}
	cout << endl;

	for (int u = 0; u < no_blocks; u++) {
		cout << blocks[u] << " ";
	}
	cout << endl;


	for (int x = 0; x < no_processes; x++) {

		if (blocks[x] >= process[x]) {
			cout << "Process of size " << process[x] << " assigned to block of size " << blocks[x] << endl;
		}
		else if (blocks[x] < process[x]) {

			for (int y = x + 1; y <= no_processes; y++) {
				if (blocks[y] >= process[x]) {
					cout << "Process of size " << process[x] << " assigned to block of size " << blocks[y] << endl;
					x++;
				}
				else {
					cout <<"process of size "<< process[x] << " is not assigned" << endl;
					x++;
				}


			}
		}
	}

}


void worst_fit() {

	fill_data();

	int i, j, temp = 0;

	//descinding order
	for (i = 0; i < no_blocks; ++i)
	{
		for (j = i + 1; j < no_blocks; ++j)
		{
			if (blocks[i] < blocks[j])
			{
				temp = blocks[i];
				blocks[i] = blocks[j];
				blocks[j] = temp;
			}
		}
	}


	for (int u = 0; u < no_processes; u++) {
		cout << process[u] << " ";
	}
	cout << endl;

	for (int u = 0; u < no_blocks; u++) {
		cout << blocks[u] << " ";
	}
	cout << endl;

	for (int x = 0; x < no_processes; x++) {

		if (blocks[x] >= process[x]) {

			cout << "Process of size " << process[x] << " assigned to block of size " << blocks[x] << endl;
		}
		else if (blocks[x] < process[x]) {

			for (int y = x + 1; y <= no_processes; y++) {
				if (blocks[y] >= process[x]) {
					cout << "Process of size " << process[x] << " assigned to block of size " << blocks[y] << endl;
					x++;
				}
				else {
					cout << process[x] << " is not assigned" << endl;
					x++;
				}


			}
		}
	}
}

int main()
{
	int num;
	cout << "~~~ Memory allocation ~~~" << endl;
	cout << endl;

	cout << "1. first fit" << endl;
	cout << "2. best fit" << endl;
	cout << "3. worst fit" << endl;

	cin >> num;

	if (num == 1) {
		first_fit();
	}
	else if (num == 2) {
		best_fit();
	}
	else if (num == 3) {
		worst_fit();
	}
}
